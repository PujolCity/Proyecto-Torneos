<?xml version="1.0" encoding="utf-8"?>
<androidx.cardview.widget.CardView xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:app="http://schemas.android.com/apk/res-auto"
    xmlns:tools="http://schemas.android.com/tools"
    android:layout_width="match_parent"
    android:layout_height="match_parent"
    tools:context=".fragments.detalle_competencias.InscripcionDetalleFragment">

    <ScrollView
        android:layout_width="match_parent"
        android:layout_height="match_parent"
        android:fillViewport="true">

        <androidx.constraintlayout.widget.ConstraintLayout
            android:layout_width="match_parent"
            android:layout_height="match_parent">

            <TextView
                android:layout_width="wrap_content"
                android:layout_height="wrap_content"
                android:layout_marginTop="40dp"
                android:text="PROBNDIO"
                app:layout_constraintEnd_toEndOf="parent"
                app:layout_constraintHorizontal_bias="0.498"
                app:layout_constraintStart_toStartOf="parent"
                app:layout_constraintTop_toBottomOf="@+id/textView29"></TextView>

            <TextView
                android:id="@+id/textView28"
                android:layout_width="wrap_content"
                android:layout_height="wrap_content"
                android:layout_marginTop="36dp"
                android:text="PROBNDIO"
                app:layout_constraintEnd_toEndOf="parent"
                app:layout_constraintHorizontal_bias="0.131"
                app:layout_constraintStart_toStartOf="parent"
                app:layout_constraintTop_toTopOf="parent"></TextView>

            <TextView
                android:id="@+id/textView29"
                android:layout_width="wrap_content"
                android:layout_height="wrap_content"
                android:layout_marginTop="20dp"
                android:text="Cómo configurar RequestQueue
En la lección anterior, se explicó cómo usar el método de conveniencia Volley.newRequestQueue para configurar una RequestQueue a fin de aprovechar el comportamiento predeterminado de Volley. En esta lección, se proporcionan los pasos explícitos para crear una RequestQueue que te permitirá ofrecer tu propio comportamiento personalizado.

Además, en esta lección, se describe la práctica recomendada para crear una RequestQueue como un singleton, lo que hace que la RequestQueue dure todo el ciclo de vida de la app.

Cómo configurar una red y una caché
Una RequestQueue necesita dos cosas a fin de realizar su trabajo: una red mediante la cual transportar las solicitudes y una caché para administrar el almacenamiento en caché. Hay implementaciones estándar para estas en la caja de herramientas de Volley: DiskBasedCache proporciona una caché de un archivo por respuesta con un índice en la memoria, y BasicNetwork proporciona transporte de red basado en tu cliente HTTP preferido.

BasicNetwork es la implementación de red predeterminada de Volley. Una BasicNetwork debe inicializarse con el cliente HTTP que tu app usa para conectarse a la red. Por lo general, es una HttpURLConnection.

En este fragmento, se muestran los pasos para configurar una RequestQueue:

KOTLIN"
                app:layout_constraintEnd_toEndOf="parent"
                app:layout_constraintHorizontal_bias="0.0"
                app:layout_constraintStart_toStartOf="parent"
                app:layout_constraintTop_toBottomOf="@+id/textView28"></TextView>
        </androidx.constraintlayout.widget.ConstraintLayout>
    </ScrollView>
</androidx.cardview.widget.CardView>